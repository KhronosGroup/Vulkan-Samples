#version 450
#extension GL_KHR_shader_subgroup_basic : enable

/* Copyright (c) 2023, Mobica Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#define PI 3.141592f

struct Vertex
{
	vec3 position;
};

layout (set = 0, binding = 0) uniform Ubo
{
	uint grid_size;
	float time;
} ubo;

layout (std140, set = 0, binding = 1) readonly buffer VertexInBuffer
{
	Vertex verticesIn[];
};

layout (std140, set = 0, binding = 2) buffer VertexOutBuffer
{
	Vertex verticesOut[];
};

void main()
{
	float amplitude = 1.5f;
	float wave_length = 25.0f;
	float speed = 15.0f;
	float k = 2.0f * PI / wave_length;
	uint idx = gl_GlobalInvocationID.x * gl_SubgroupInvocationID + gl_GlobalInvocationID.y * gl_SubgroupInvocationID +  gl_GlobalInvocationID.z * gl_SubgroupInvocationID;

 	subgroupMemoryBarrierBuffer();

	Vertex inVertex = verticesIn[idx];

 	inVertex.position.y = amplitude * sin(k * (inVertex.position.x - (speed * ubo.time))) * cos(k * (inVertex.position.z - (speed * ubo.time)));
 	
	verticesOut[idx] = inVertex;
}
