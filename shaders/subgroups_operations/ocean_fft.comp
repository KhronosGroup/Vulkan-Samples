	#version 450
#extension GL_KHR_shader_subgroup_basic : enable

/* Copyright (c) 2023, Mobica Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#define PI 3.141592f
#define PI2 6.283184
#define GRAVITY 9.81f

struct Vertex
{
	vec3 position;
	vec3 normal;
};

struct Complex
{
	float real;
	float imag;
};

struct FFTInputData
{
	Complex tilde;
	Complex tilde_conj;
};

Complex complexMultiplication(Complex a, float scalar)
{
	Complex res;
	res.real = scalar * a.real;
	res.imag = scalar * a.imag;
	return res;
}

Complex conjugate(Complex a)
{
	Complex res;
	res.real = a.real;
	res.imag = -a.imag;
	return res;
}

layout (set = 0, binding = 0) uniform FFTParametersUbo
{
	float amplitude;
	float len;
	vec2  wind;
	uint  grid_size;
} fftUbo;

layout (std140, set = 0, binding = 1) readonly buffer FFTInputDataBuffer
{
	FFTInputData data[];
};

layout (std140, set = 0, binding = 2) buffer VertexOutBuffer
{
	Vertex verticesOut[];
};


// Add another FFTInputData buffer to store the results of the hTilde calculation
// Add 3'th FFTInputData buffer to store fft calculation results - final values

float dispersion(uint n, uint m)
{
	float w0 = 2.0f * PI / 50.0f;
	float x = PI * (2.0f * n - fftUbo.grid_size) / fftUbo.len;
	float z = PI * (2.0f * m - fftUbo.grid_size) / fftUbo.len;
	return floor(sqrt(GRAVITY * sqrt(x * x + z * z)) / w0) *w0;
}


Complex hTilde(float t, uint n, uint m)
{
	uint idx = gl_GlobalInvocationID.x * gl_SubgroupInvocationID + gl_GlobalInvocationID.y * gl_SubgroupInvocationID +  gl_GlobalInvocationID.z * gl_SubgroupInvocationID;
	Complex tilde0 = data[idx].tilde
	Complex tilde0_conj = data[idx].tilde_conj;
	
	float omega = dispersion(n, m);
	
	float _sin = sin(omega);
	float _cos = cos(omega);
	
	Complex c0;
	c0.real = _cos;
	c0.imag = _sin;
	
	Complex c1 = conjugate(c0);

	return (tilde0 * c0) + (tilde0_conj * c1); // TODO add a multiply and add functions for Complex struct
}

void fft()
{

}

void main()
{
	uint idx = gl_GlobalInvocationID.x * gl_SubgroupInvocationID + gl_GlobalInvocationID.y * gl_SubgroupInvocationID +  gl_GlobalInvocationID.z * gl_SubgroupInvocationID;

 	subgroupMemoryBarrierBuffer();

	FFTInputData inData = data[idx];

	verticesOut[idx].position = vec3(0.0f);
	verticesOut[idx].normal = vec3(0.0f); 
}
