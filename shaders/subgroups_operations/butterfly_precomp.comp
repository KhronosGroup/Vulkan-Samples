#version 450 
#extension GL_KHR_shader_subgroup_basic : enable
/* Copyright (c) 2023, Mobica Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define PI_32F 3.14159265358979f

layout (local_size_x = 8, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rgba32f) writeonly uniform image2D u_butterfly_precomp;

layout (std430, binding = 1) buffer indices
{
    int data[];
} bit_reversed_indices;

layout (binding = 2) uniform FFTParametersUbo
{
	float amplitude;
	float len;
	uint  grid_size;
	vec2  wind;
} fftUbo;

void main()
{
    vec2 pos = gl_GlobalInvocationID.xy;
    uint N = fftUbo.grid_size;

    // Twiddle factor exponent, Thesis, Section 4.2.6, Eq 4.6
    float k = mod(pos.y * (float(N) / pow(2, pos.x + 1)), N);

    // Thesis, Section 4.2.6, Eq 4.7
    int butterfly_span = int(pow(2, pos.x));
    int butterfly_wing = 0;

    if ((mod(pos.y, pow(2, pos.x + 1))) < butterfly_span) butterfly_wing = 1;

<<<<<<< HEAD
    ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
=======
        ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
        //pixel_pos.y = N - pixel_pos.y - 1;
>>>>>>> e005a65 (Add tilde_h_0 shader)

    vec4 result = vec4(0.0f);
    result.x = cos(2.f * PI_32F * k / float(N));	// Twiddle factor real part
    result.y = sin(2.f * PI_32F * k / float(N));	// Twiddle factor imaginary part

    // Store the sample indices for the next stage
    if (pos.x == 0)
    {
        if (butterfly_wing == 1)
        {
            result.z = bit_reversed_indices.data[int(pos.y)];
            result.w = bit_reversed_indices.data[int(pos.y + 1)];
        }
        else
        {
            result.z = bit_reversed_indices.data[int(pos.y - 1)];
            result.w =  bit_reversed_indices.data[int(pos.y)];
        }
    }
    else
    {
        if (butterfly_wing == 1)
        {
            result.z = pos.y;
            result.w = pos.y + butterfly_span;
        }
        else
        {
            result.z = pos.y - butterfly_span;
            result.w = pos.y;
        }
    }

    imageStore(u_butterfly_precomp, pixel_pos, result);
}

