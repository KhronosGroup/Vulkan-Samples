#version 450
#extension GL_KHR_shader_subgroup_basic : enable

/* Copyright (c) 2023, Mobica Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rgba32f) writeonly uniform image2D u_displacement;

layout (binding = 1, rgba32f) readonly uniform image2D u_pingpong0_y;
layout (binding = 2, rgba32f) readonly uniform image2D u_pingpong1_y;

//layout (binding = 3, rgba32f) readonly uniform image2D u_pingpong0_x;
//layout (binding = 4, rgba32f) readonly uniform image2D u_pingpong1_x;
//
//layout (binding = 5, rgba32f) readonly uniform image2D u_pingpong0_z;
//layout (binding = 6, rgba32f) readonly uniform image2D u_pingpong1_z;

layout (binding = 3) uniform InvertFft
{
    int pong_idx;
    uint grid_size;
} fftUbo;

void main()
{

    uint N = fftUbo.grid_size;

	ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy * 0.5f);

	float perms[2] = { 1.0, -1.0 };
	int index = int(mod(pixel_pos.x + pixel_pos.y, 2));
	float perm = perms[index];
    uint pingpong_index = fftUbo.pong_idx;
	if (pingpong_index == 0)
    {
        float h_y = imageLoad(u_pingpong0_y, pixel_pos).r;
       // float h_x = imageLoad(u_pingpong0_x, pixel_pos).r;
       // float h_z = imageLoad(u_pingpong0_z, pixel_pos).r;
      //  imageStore(u_displacement, pixel_pos, vec4(perm * (h_y / float(N * N)), perm * (h_x / float(N * N)), perm * (h_z / float(N * N)), 1.0f));
       imageStore(u_displacement, pixel_pos, vec4(perm * (h_y / float(N * N)), 0.0f, 0.0f, 1.0f));
    }
    else if (pingpong_index == 1)
    {
        float h = imageLoad(u_pingpong1_y, pixel_pos).r;
        imageStore(u_displacement, pixel_pos, vec4(perm * (h / float(N * N)), 0, 0, 1));
    }
}
