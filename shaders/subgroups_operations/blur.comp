#version 450
/* Copyright (c) 2023, Mobica Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

#extension GL_KHR_shader_subgroup_basic : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform readonly image2D inputTexture;

layout(binding = 1, rgba8) uniform writeonly image2D outputTexture;

layout (binding = 2) uniform KernelUbo {
    mat3 kernel;
} kernelUbo;


struct ImageMatrix
{
    float texel[9];
} imageMatrix;

void main()
{
    ivec2 textureCoord = ivec2(gl_GlobalInvocationID.xy);
    vec4 resultTexelColor = vec4(0.0);
    float denom = 1.0;
    float offset = 0.5;

    int currentTexel = 0;
    for (int x = -1; x < 2; ++x)
    {
        for (int y = -1; y < 2; ++y)
        {
            ivec2 orginalTexelCoord = ivec2(gl_GlobalInvocationID.x + x, gl_GlobalInvocationID.y + y);
            vec3 texelRgb = imageLoad(inputTexture, orginalTexelCoord).rgb;
            imageMatrix.texel[currentTexel] = (texelRgb.r + texelRgb.g + texelRgb.b) / 3.0; // calculate avg texel color
            ++currentTexel;
        }
    }

    float avgColor = 0.0;
    for (int i = 0; i < 9; ++i)
    {
        avgColor += float(kernelUbo.kernel[i] * imageMatrix.texel[i]);
    }

    vec3 rgb = vec3(clamp(avgColor / denom + offset, 0.0, 1.0));

    resultTexelColor = vec4(rgb, 1.0);
    
    imageStore(outputTexture, textureCoord, resultTexelColor);
}
