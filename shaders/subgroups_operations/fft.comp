#version 450
#extension GL_KHR_shader_subgroup_basic : enable
<<<<<<< HEAD
=======
#extension GL_EXT_debug_printf : enable

precision highp float;


>>>>>>> e005a65 (Add tilde_h_0 shader)
/* Copyright (c) 2023, Mobica Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (constant_id = 0) const int direction = 0;

layout (binding = 0, rgba32f) readonly uniform image2D u_butterfly_precomp;
layout (binding = 1, rgba32f) uniform image2D u_pingpong0;
layout (binding = 2, rgba32f) uniform image2D u_pingpong1;

layout( push_constant ) uniform Push_Constants{
    uint i;
} step;

struct Complex
{
    float real;
    float imag;
};

Complex complex_add(Complex c1, Complex c2)
{
    Complex res;
    res.real = c1.real + c2.real;
    res.imag = c1.imag + c2.imag;
    return res;
}

Complex complex_multiply(Complex c1, Complex c2)
{
    Complex res;
    res.real = c1.real * c2.real - c1.imag * c2.imag;
    res.imag = c1.real * c2.imag + c1.imag * c2.real;
    return res;
}

void HorizontalButterflies(in ivec2 pixel_pos)
{
    vec4 butterfly_precomp = imageLoad(u_butterfly_precomp, ivec2(step.i, pixel_pos.x));
    if ((step.i % 2) == 0)
    {
        vec2 a_ = imageLoad(u_pingpong0, ivec2(butterfly_precomp.z, pixel_pos.y)).rg;
        vec2 b_ = imageLoad(u_pingpong0, ivec2(butterfly_precomp.w, pixel_pos.y)).rg;

        Complex a = Complex(a_.x, a_.y);
        Complex b = Complex(b_.x, b_.y);
        Complex twiddle_factor = Complex(butterfly_precomp.x, butterfly_precomp.y);

        Complex result = complex_add(a, complex_multiply(twiddle_factor, b));
        subgroupMemoryBarrierImage();
        imageStore(u_pingpong1, pixel_pos, vec4(result.real, result.imag, 0.f, 1.f));
    }
    else
    {
        vec2 a_ = imageLoad(u_pingpong1, ivec2(butterfly_precomp.z, pixel_pos.y)).rg;
        vec2 b_ = imageLoad(u_pingpong1, ivec2(butterfly_precomp.w, pixel_pos.y)).rg;

        Complex a = Complex(a_.x, a_.y);
        Complex b = Complex(b_.x, b_.y);
        Complex twiddle_factor = Complex(butterfly_precomp.x, butterfly_precomp.y);

        Complex result = complex_add(a, complex_multiply(twiddle_factor, b));
        subgroupMemoryBarrierImage();
        imageStore(u_pingpong0, pixel_pos, vec4(result.real, result.imag, 0.f, 1.f));
    }
}

void VerticalButterfiles(in ivec2 pixel_pos)
{
    vec4 butterfly_precomp = imageLoad(u_butterfly_precomp, ivec2(step.i, pixel_pos.y));
    if ((step.i % 2) == 0)
    {
        vec2 a_ = imageLoad(u_pingpong0, ivec2(pixel_pos.x, butterfly_precomp.z)).rg;
        vec2 b_ = imageLoad(u_pingpong0, ivec2(pixel_pos.x, butterfly_precomp.w)).rg;

        Complex a = Complex(a_.x, a_.y);
        Complex b = Complex(b_.x, b_.y);
        Complex twiddle_factor = Complex(butterfly_precomp.x, butterfly_precomp.y);

        Complex result = complex_add(a, complex_multiply(twiddle_factor, b));
        subgroupMemoryBarrierImage();
        imageStore(u_pingpong1, pixel_pos, vec4(result.real, result.imag, 0.f, 1.f));
    }
    else
    {
        vec2 a_ = imageLoad(u_pingpong1, ivec2(pixel_pos.x, butterfly_precomp.z)).rg;
        vec2 b_ = imageLoad(u_pingpong1, ivec2(pixel_pos.x, butterfly_precomp.w)).rg;

        Complex a = Complex(a_.x, a_.y);
        Complex b = Complex(b_.x, b_.y);
        Complex twiddle_factor = Complex(butterfly_precomp.x, butterfly_precomp.y);

        Complex result = complex_add(a, complex_multiply(twiddle_factor, b));
        subgroupMemoryBarrierImage();
        imageStore(u_pingpong0, pixel_pos, vec4(result.real, result.imag, 0.f, 1.f));
    }
}

void main()
{
    ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
    if (direction == 0) HorizontalButterflies(uv);
    else if (direction == 1) VerticalButterfiles(uv);
}
