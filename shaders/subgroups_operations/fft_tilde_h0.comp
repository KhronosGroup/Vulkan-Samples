#version 460 core

#define PI 3.14159265358979f
#define g 9.81f

layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 0, rgba32f) uniform image2D tilde_h0_k;
layout (binding = 1, rgba32f) uniform image2D tilde_h0_minus_k;

float SuppressionFactor(float k_magnitude_sq)
{
        float u_SuppressLength = 0.1;
        return exp(-k_magnitude_sq * u_SuppressLength * u_SuppressLength);
}

// Phillips Spectrum, Section 4.3, Eq 40
float PhillipsSpectrum(vec2 k, float k_magnitude_sq, float L_phillips)
{
        float u_Amplitude = 2.0;
        vec2 u_WindDirection = normalize(vec2(1.0, 1.0));
        return u_Amplitude * ((exp(-1.0 / (k_magnitude_sq * L_phillips * L_phillips)) * pow(dot(normalize(k), u_WindDirection), 2))
                * SuppressionFactor(k_magnitude_sq)) / (k_magnitude_sq * k_magnitude_sq);
}

void main()
{
        int u_N = 256;
        int u_L = 1000;
        float u_WindSpeed = 80.0;

        vec2 pos = vec2(gl_GlobalInvocationID.xy) - (u_N / 2.0);

        // Wavevector, Section 4.3, Eq 36
        vec2 k = vec2((2.0 * PI * pos.x) / u_L, (2.0 * PI * pos.y) / u_L);

        float k_magnitude = length(k);
        if (k_magnitude < 0.00001)	k_magnitude = 0.00001;

        // Largest possible waves arising from a continuous wind of speed wind_speed, Section 4.3, after Eq 40
        float L_phillips = (u_WindSpeed * u_WindSpeed) / g;

        // Section 4.4, Eq 42
        float h0_k = clamp(sqrt(PhillipsSpectrum(k, k_magnitude * k_magnitude, L_phillips) / 2.0), -4000.0, 4000.0);
        float h0_minus_k = clamp(sqrt(PhillipsSpectrum(-k, k_magnitude * k_magnitude, L_phillips) / 2.0), -4000.0, 4000.0);

        vec4 rnd = {1.0f, 1.0f, 1.0f, 1.0f}; //GaussianRandom();

        ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
        imageStore(tilde_h0_k, pixel_pos, vec4(rnd.xy * h0_k, 0.0, 1.0));
        imageStore(tilde_h0_minus_k, pixel_pos, vec4(rnd.zw * h0_minus_k, 0.0, 1.0));
}
