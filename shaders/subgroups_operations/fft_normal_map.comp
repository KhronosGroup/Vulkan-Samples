#version 450
#extension GL_KHR_shader_subgroup_basic: enable
/* Copyright (c) 2023, Mobica Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rgba32f) writeonly uniform image2D fft_normal_map;

layout (binding = 1, rgba32f) readonly uniform image2D fft_displacement_map;

layout (binding = 2) uniform InvertFft
{
    int pong_idx;
    uint grid_size;
} fftUbo;

void main()
{
    uint N = fftUbo.grid_size;
    ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
    const float offset = 1.0f;

    vec3 v0 = imageLoad(fft_displacement_map, ivec2(pixel_pos + vec2(0.0f, -offset))).rgb;
    vec3 v1 = imageLoad(fft_displacement_map, ivec2(pixel_pos + vec2(0.0f, offset))).rgb;
    float v01_length = length(v1 - v0);

    vec3 v2 = imageLoad(fft_displacement_map, ivec2(pixel_pos + vec2(-offset, 0.0f))).rgb;
    vec3 v3 = imageLoad(fft_displacement_map, ivec2(pixel_pos + vec2(offset, 0.0f))).rgb;
    float v23_length = length(v3 - v2);

    vec3 c0 = v0 - v1 / 2.0f * v01_length;
    vec3 c1 = v2 - v3 / 2.0f * v23_length;

    // c0 = f(n - 1) - f(n + 1) / 2h; h - length(f(n + 1) - f(n - 1)) // left - right
    // c1 = f(m - 1) - f(m + 1) / 2h; h - length(f(m + 1) - f(m - 1)) // top - bottom
    // n = cross(c0, c1)

    vec3 result = cross(c0, c1);
    imageStore(fft_normal_map, pixel_pos, vec4(normalize(result), 1.0f));
}