/* Copyright (c) 2023, Qualcomm Innovation Center, Inc. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * ------------------------------------------------------------------------
 *
 * THIS IS A MODIFIED VERSION OF THE ORIGINAL FILE
 * 
 * The original file, along with the original Apache-2.0 LICENSE can be found at:
 * https://github.com/google-research/jax3d/tree/main/jax3d/projects/mobilenerf
 *
 * Modification details: Shader code was updated to work on Vulkan (originally
 * built for WebGL)
 * Contributor: (Qualcomm) Rodrigo Holztrattner - quic_rholztra@quicinc.com
 */
#version 460

#extension GL_EXT_ray_query : enable

layout(binding = 0, set = 0, rgba8) uniform image2D image;

layout(binding = 1, set = 0) uniform sampler2D inputFeature_0;

layout(binding = 2, set = 0) uniform sampler2D inputFeature_1;

// TODO should add mlp weight in here
//layout(set = 0, binding = 2) uniform mlp_weights....

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main() 
{
	const uvec3 globalSize = gl_NumWorkGroups * gl_WorkGroupSize;
	const vec2 pixelCenter = vec2(gl_GlobalInvocationID.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(globalSize);

	vec4 feature_0 = texture(inputFeature_0, inUV);
	vec4 feature_1 = texture(inputFeature_1, inUV);

	vec4 o_color = vec4(((feature_0 + feature_1) / 2.0f).rgb, 1.0f);

	imageStore(image, ivec2(gl_GlobalInvocationID.xy), o_color);
}

