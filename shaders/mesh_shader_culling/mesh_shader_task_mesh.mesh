#version 450
/* Copyright (c) 2023, Holochip Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_mesh_shader: require
#extension GL_GOOGLE_include_directive: require

#define DEBUG 0
#define CULL 1

#define TASK_WG_SIZE 64
#define MESH_WG_SIZE 64

// Definition of Data structures

struct Vertex
{
    vec3 position;
    vec3 color;
};

struct MeshletInfo
{
    uint32_t vertexCount;
    uint32_t vertexBeginIndex;
    uint32_t primitiveCount;
    uint32_t primitiveBeginIndex;
};

layout(local_size_x = MESH_WG_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 64) out;

layout(binding = 0) readonly buffer VertexArray
{
	Vertex vertexArray[];
};

layout(binding = 1) readonly buffer VertexIndex
{
	uint32_t vertexIndex[];
};

layout(binding = 2) readonly buffer MeshletData
{
	MeshletInfo meshletData[];
};

layout(binding = 3) readonly buffer PrimitiveIndex
{
	uint8_t primitiveIndex[];
};

struct Task
{
  uint      baseID;
  uint8_t   deltaID;
};

taskPayloadSharedEXT Task IN;

//taskPayloadSharedEXT MeshTaskPayload payload;


layout (location=0) out vec4 perVertex[];
layout (location=1) perprimitiveEXT out vec4 perPrimitiveEXT[];
layout (location=3) out vec3 outColor[];

layout(location = 0) out vec3 color[];


void main()
{
        SetMeshOutputsEXT(4, 2); // Means 4 vertices and 2 primitives (e.g., triangles in this case)
        // Generating vertices
        gl_MeshVerticesEXT[0].gl_Position = vec4(-0.25, -0.25, 0.0, 1.0);
        gl_MeshVerticesEXT[1].gl_Position = vec4( 0.25, -0.25, 0.0, 1.0);
        gl_MeshVerticesEXT[2].gl_Position = vec4(-0.25,  0.25, 0.0, 1.0);
        gl_MeshVerticesEXT[3].gl_Position = vec4( 0.25,  0.25, 0.0, 1.0);
        // Generating indices, so the actual index array reads {0, 1, 2, 2, 1, 3}...
        gl_PrimitiveTriangleIndicesEXT[0] = uvec3(0, 1, 2);
        gl_PrimitiveTriangleIndicesEXT[1] = uvec3(2, 1, 3);
        // Assigning color to each vertex
        outColor[0] = vec3(1.0);
        outColor[1] = vec3(1.0);
        outColor[2] = vec3(1.0);
        outColor[3] = vec3(1.0);

    color = vec4(1.0);
}
