#version 450
/* Copyright (c) 2023, Holochip Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#extension GL_EXT_mesh_shader: require
#extension GL_GOOGLE_include_directive: require

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 4, max_primitives = 2) out;

#include "mesh_shader_culling/mesh_shader_shared.h"

taskPayloadSharedEXT SharedData sharedData;

// Example of a default output layout and location format:

layout (location=0) out vec4 perVertex[];
layout (location=1) perprimitiveEXT out vec4 perPrimitiveEXT[];
layout (location=3) out vec3 outColor[];

const vec2 unitVertex_0 = vec2(-0.5f,  0.5f);
const vec2 unitVertex_1 = vec2( 0.5f,  0.5f);
const vec2 unitVertex_2 = vec2( 0.5f, -0.5f);
const vec2 unitVertex_3 = vec2(-0.5f, -0.5f);

const uvec3 unitPrimitive_0 = uvec3(0, 1, 2);
const uvec3 unitPrimitive_1 = uvec3(2, 3, 0);

void main()
{
    float x = float(gl_GlobalInvocationID.x) / gl_WorkGroupSize.x;
    float y = float(gl_GlobalInvocationID.y) / gl_WorkGroupSize.y;

    // translate the identical meshlet to its targeted position:
    vec2 deltaPosition_xy = ( 2.0f * vec2( x, y ) - gl_WorkGroupSize.x - 1.0f ) * sharedData.subDimension;

    // the actual position of each meshlet:
    vec2 position = deltaPosition_xy + sharedData.positionTransformation;
    float squareRadius = position.x * position.x + position.y * position.y;

    uint number_of_vertices = 0;
    uint number_of_primitives = 0;
    bool do_emit = (squareRadius < sharedData.cullRadius * sharedData.cullRadius);
    if ( do_emit )
    {
        number_of_vertices = 4;
        number_of_primitives = 2;
    }

    SetMeshOutputsEXT( number_of_vertices, number_of_primitives);

    if ( do_emit )
    {
        // Vertices:
        gl_MeshVerticesEXT[0].gl_Position = vec4(2.0 * sharedData.subDimension * unitVertex_0 + position, 0.0, 1.0);
        gl_MeshVerticesEXT[1].gl_Position = vec4(2.0 * sharedData.subDimension * unitVertex_1 + position, 0.0, 1.0);
        gl_MeshVerticesEXT[2].gl_Position = vec4(2.0 * sharedData.subDimension * unitVertex_2 + position, 0.0, 1.0);
        gl_MeshVerticesEXT[3].gl_Position = vec4(2.0 * sharedData.subDimension * unitVertex_3 + position, 0.0, 1.0);

        // Indices
        gl_PrimitiveTriangleIndicesEXT[0] = unitPrimitive_0;
        gl_PrimitiveTriangleIndicesEXT[1] = unitPrimitive_1;

        // Assigning the color output:
        vec3 color = vec3( 1.0f, 0.0f, 0.0f ) * ( gl_GlobalInvocationID + 1 ) / gl_NumWorkGroups;
        outColor[0] = color;
        outColor[1] = color;
        outColor[2] = color;
        outColor[3] = color;
    }
}
