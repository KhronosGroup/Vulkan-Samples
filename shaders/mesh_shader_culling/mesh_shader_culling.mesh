#version 450
/* Copyright (c) 2023, Holochip Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#extension GL_EXT_mesh_shader: require

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

struct PrimitiveColor
{
    vec3 color_1;
    vec3 color_2;
};

taskPayloadSharedEXT vec4 deltaPosition;

layout (location=0) out vec4 perVertex[];
layout (location=1) perprimitiveEXT out vec4 perPrimitiveEXT[];
layout (location=3) out vec3 outColor[];

void main()
{
    SetMeshOutputsEXT(4, 2);

    gl_MeshVerticesEXT[0].gl_Position = vec4(-0.25, -0.25, 0.0, 1.0) + deltaPosition;
    gl_MeshVerticesEXT[1].gl_Position = vec4( 0.25, -0.25, 0.0, 1.0) + deltaPosition;
    gl_MeshVerticesEXT[2].gl_Position = vec4(-0.25,  0.25, 0.0, 1.0) + deltaPosition;
    gl_MeshVerticesEXT[3].gl_Position = vec4( 0.25,  0.25, 0.0, 1.0) + deltaPosition;

    gl_PrimitiveTriangleIndicesEXT[0] = uvec3(0, 1, 2);
    gl_PrimitiveTriangleIndicesEXT[1] = uvec3(2, 1, 3);

    vec3 color_1 = vec3(1.0f, 0.0f, 0.0f);
    vec3 color_2 = vec3(1.0f, 1.0f, 0.0f);

    outColor[0] = color_2;
    outColor[1] = color_1;
    outColor[2] = color_1;
    outColor[3] = color_1;

}