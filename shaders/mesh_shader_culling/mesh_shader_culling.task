#version 450
/* Copyright (c) 2023, Holochip Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#extension GL_EXT_mesh_shader: require

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Example of how to read a binding input from cpp:

layout (binding = 0) uniform UBO
{
    float cull_center_x;
    float cull_center_y;
    float cull_radius;
    float meshlet_density;
} ubo;

// Example of the data shared with its associated mesh shader:
// 1) define some structure if more than one variable data sharing is desired:

struct SharedData
{
    vec4  positionTransformation;
    int   N;
    int   meshletsNumber;
    float subDimension;
    float cullRadius;
};

// 2) use the following command to "establish the connection" to its associated mesh shader:

taskPayloadSharedEXT SharedData sharedData;

// Defines the square mesh dimension as a constant:

const float squareDimension = 1.1f;

void main()
{
    // Example of processing the shared data:

    sharedData.positionTransformation = vec4(ubo.cull_center_x, ubo.cull_center_y, 0.0f, 0.0f);
    sharedData.cullRadius = ubo.cull_radius;

    if (ubo.meshlet_density == 0)
    {
        // Attempt to create a 6 by 6 meshlets array

        sharedData.N = 4;
        sharedData.meshletsNumber = 4 * 4;
        sharedData.subDimension = squareDimension / 4.0f;
    }
    else if (ubo.meshlet_density == 1)
    {
        // Attempt to create a 6 by 6 meshlets array

        sharedData.N = 6;
        sharedData.meshletsNumber = 6 * 6;
        sharedData.subDimension = squareDimension / 6.0f;
    }
    else if (ubo.meshlet_density == 2)
    {
        // Attempt to create a 6 by 6 meshlets array

        sharedData.N = 8;
        sharedData.meshletsNumber = 8 * 8;
        sharedData.subDimension = squareDimension / 8.0f;
    }
    else
    {
        // Debug if one sees a 2 by 2 meshlets array, that means uniform buffer (e.g., ubo) is not read
        sharedData.N = 2;
        sharedData.meshletsNumber = 2 * 2;
        sharedData.subDimension = squareDimension / 2.0f;
    }
    // Nothing else should be done, the above data automatically share with its associated mesh shader

    // Example of emit mesh tasks, which only 1 group, 1 sub group, and etc.,

	EmitMeshTasksEXT(1, 1, 1);
}
