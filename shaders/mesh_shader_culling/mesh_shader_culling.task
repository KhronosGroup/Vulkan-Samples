#version 450
/* Copyright (c) 2023, Holochip Corporation
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#extension GL_EXT_mesh_shader: require

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Structures

struct PrimitiveColor
{
    vec4 position;
    vec3 color_2;
};

// Input

layout (binding = 0) uniform UBO
{
    float cull_center_x;
    float cull_center_y;
    float cull_radius;
    float meshlet_density;
} ubo;

// Shared Data to mesh:

taskPayloadSharedEXT vec4 deltaPosition;


// Output
layout(location = 0) out vec4 displacement[4];

// Task Shader Functions


// Shader Constant

const float squareDimension = 1.0f;

int N = 2;
int meshletsNumber = N * N;

float subDimension = squareDimension / N * 0.5f;


void main()
{
    deltaPosition = vec4(ubo.cull_center_x, ubo.cull_center_y, 0.0f, 0.0f);

    // task calculation:
    for ( int k = 0; k < meshletsNumber; k++)
    {
        float j = floor(k / N);
        float i = k - j * N;

        vec2 deltaPosition_xy = ( 2.0f * vec2(i, j) - N - 1.0f ) * subDimension;

       // displacement[k] = vec4(deltaPosition_xy, 0.0f, 1.0f);
    }

	EmitMeshTasksEXT(1, 1, 1);
}